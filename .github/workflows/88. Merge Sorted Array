class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        # Start from the end of nums1 and nums2
        # and merge them from back to front
        while m > 0 and n > 0:
            if nums1[m - 1] > nums2[n - 1]:
                nums1[m + n - 1] = nums1[m - 1]
                m -= 1
            else:
                nums1[m + n - 1] = nums2[n - 1]
                n -= 1
        # If there are any elements left in nums2, they are the smallest
        # and should be placed at the beginning of nums1
        nums1[:n] = nums2[:n]

# Create an instance of the solution
solution = Solution()

# Example 1
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3
solution.merge(nums1, m, nums2, n)
print("Example 1:", nums1)

# Example 2
nums1 = [1]
m = 1
nums2 = []
n = 0
solution.merge(nums1, m, nums2, n)
print("Example 2:", nums1)

# Example 3
nums1 = [0]
m = 0
nums2 = [1]
n = 1
solution.merge(nums1, m, nums2, n)
print("Example 3:", nums

##https://leetcode.com/problems/merge-sorted-array/submissions/1181373332?envType=study-plan-v2&envId=top-interview-150
##if와 else 구문은 결정을 내리는 데 사용됩니다. 이 경우에는 두 정렬된 배열 nums1과 nums2에서 어떤 숫자를 nums1에 다음으로 넣을지 결정하는 데 사용됩니다. 이해를 돕기 위해 간단한 예제로 설명해 드리겠습니다.

예를 들어, nums1의 마지막 요소는 3이고 nums2의 마지막 요소는 5라고 가정해 보겠습니다. nums1의 길이는 이미 m + n으로 설정되어 있으며, 병합되지 않은 부분은 0으로 채워져 있습니다.

if 부분의 경우:

if nums1[m - 1] > nums2[n - 1]:
이 조건은 nums1의 마지막 요소가 nums2의 마지막 요소보다 클 때 참입니다.
예를 들어, nums1 = [1, 3, 5, 0, 0, 0], m = 3 그리고 nums2 = [2, 4, 6], n = 3이라면, nums1의 m - 1 번째 요소는 5, nums2의 n - 1 번째 요소는 6입니다.
5는 6보다 작기 때문에 이 경우 if 조건은 거짓이 됩니다. 그래서 코드는 else 부분으로 넘어갑니다.
else 부분의 경우:

else 부분은 if의 조건이 거짓일 때 실행됩니다, 즉 nums2의 요소가 nums1의 요소보다 크거나 같을 때입니다.
nums1[m + n - 1] = nums2[n - 1] 이 부분에서는 nums1의 끝에서부터 병합을 시작하여 nums2의 마지막 요소를 복사합니다.
위의 예제에서는 nums1의 6번째 위치에 nums2의 마지막 값인 6을 넣고, n을 하나 감소시켜 nums2에서 다음으로 낮은 값을 가리키게 합니다.
이제 nums1은 [1, 3, 5, 0, 0, 6]이 되고, nums2는 여전히 [2, 4, 6]이지만 다음 비교를 위해 n은 2가 됩니다.
이 과정을 반복하면서 nums1과 nums2의 요소들을 비교하고, nums1의 올바른 위치에 값을 채워나가며 최종적으로 두 배열을 하나로 병합합니다.
##Suppose we have two arrays, nums1 and nums2, that are sorted and need to be merged into nums1. At the end of nums1, we have the number 3, and at the end of nums2, we have the number 5. nums1 has been expanded to accommodate the length of both nums1 and nums2, with the unmerged part filled with zeros.

For the if part:

if nums1[m - 1] > nums2[n - 1]:
This condition checks if the last element in nums1 is greater than the last element in nums2.
For instance, if nums1 = [1, 3, 5, 0, 0, 0], m = 3, and nums2 = [2, 4, 6], n = 3, then the (m - 1)th element in nums1 is 5, and the (n - 1)th element in nums2 is 6.
Since 5 is less than 6, the if condition would be false. So, the code would move to the else part.
For the else part:

The else part is executed when the if condition is false, meaning the element in nums2 is greater than or equal to the element in nums1.
nums1[m + n - 1] = nums2[n - 1] in this line, the code starts merging from the end of nums1, copying the last element of nums2 into it.
In our example, the 6th position of nums1 would receive the last value from nums2, which is 6, and n would be decremented to point to the next lower value
in nums2 for the following comparisons.

After this operation, nums1 would become [1, 3, 5, 0, 0, 6], and nums2 would still be [2, 4, 6], but for the next comparison, n would now be 2.
This process is repeated, comparing elements from nums1 and nums2, and filling in the values at the correct positions in nums1, thus merging both arrays into one. By the end of this algorithm, nums1 will be a fully merged and sorted array containing all elements from both nums1 and nums2.
